/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
module org.eclipse.xtext.bootstrap.GenerateXtext

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var runtimeProjectName = "org.eclipse.xtext"
var uiProjectName = "org.eclipse.xtext.xtext.ui"
var runtimeProject = "../../plugins/${runtimeProjectName}"
var uiProject = "../../plugins/${uiProjectName}"
var file.extensions = "xtext,xtext2"

var ideaProjectName = "${runtimeProjectName}.xtext.idea"
var ideaProjectPath = "../../intellij/${ideaProjectName}"

Workflow {
	bean = StandaloneSetup {
		ignoreBrokenProjectFiles = true
		platformUri = "${runtimeProject}/../.."
		registerGenModelFile = "platform:/resource/org.eclipse.xtext/org/eclipse/xtext/Xtext.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${uiProject}/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${ideaProjectPath}/src-gen"
	}

	component = Generator auto-inject {
		pathRtProject = runtimeProject
		pathUiProject = uiProject
		projectNameRt = runtimeProjectName
		projectNameUi = uiProjectName
		activator = "org.eclipse.xtext.xtext.ui.internal.Activator"
		language = {
			uri = "platform:/resource/org.eclipse.xtext/src/org/eclipse/xtext/Xtext.xtext"
			fileExtensions = "${file.extensions}"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
				options = {
					classSplitting = true
				}
			}
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = "${file.extensions}"
			}
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = labeling.LabelProviderFragment {}
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {
				options = {
					classSplitting = true
				}
			}
			fragment = compare.CompareFragment {
				fileExtensions = file.extensions
			}
			fragment = refactoring.RefactorElementNameFragment {}
			fragment = templates.CodetemplatesGeneratorFragment {} 
    		
    		fragment = org.eclipse.xtext.idea.generator.IdeaPluginGenerator auto-inject {
    			runtimeProjectName = runtimeProjectName
    			runtimeProjectPath = runtimeProject
	        }
	        
	        /*
	        fragment = org.eclipse.xtext.idea.generator.parser.antlr.XtextAntlrIDEAGeneratorFragment auto-inject {
				options = {
					classSplitting = true
				}
			}
			*/
			
		}
	}

	component = Generator auto-inject {
		pathRtProject = runtimeProject
		projectNameRt = runtimeProjectName
		language = {
			uri = "platform:/resource/org.eclipse.xtext/src/org/eclipse/xtext/common/Terminals.xtext"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
		}
	}

}
